// Generated by CoffeeScript 1.12.4
var Arguments, Either, NamedFunction, ObjectOrArray, Validator, assertType, define, emptyFunction, formatType, isDev, isType, mergeDefaults, setType;

NamedFunction = require("NamedFunction");

emptyFunction = require("emptyFunction");

mergeDefaults = require("mergeDefaults");

assertType = require("assertType");

formatType = require("formatType");

Validator = require("Validator");

setType = require("setType");

Either = require("Either");

isType = require("isType");

define = require("define");

isDev = require("isDev");

ObjectOrArray = Either(Object, Array);

module.exports = Arguments = NamedFunction("Arguments", function(types) {
  var self;
  assertType(types, ObjectOrArray);
  self = {
    isArray: Array.isArray(types)
  };
  if (isDev) {
    self.types = types;
    self.required = self.isArray;
    if (!self.isArray) {
      self.strict = false;
    }
    self.shouldValidate = emptyFunction.thatReturnsTrue;
  }
  return setType(self, Arguments);
});

define(Arguments.prototype, {
  create: emptyFunction.thatReturnsArgument,
  initialize: function(values) {
    if (isDev && (values != null)) {
      assertType(values, Array);
    }
    values = this.create(values != null ? values : []);
    if (!this.isArray) {
      values = values[0];
      if (values == null) {
        values = {};
      }
    }
    if (values != null) {
      if (this.isArray) {
        assertType(values, Array, "arguments");
      } else {
        assertType(values, Object, "arguments[0]");
      }
      if (this.defaults) {
        mergeDefaults(values, this.defaults);
      }
    }
    return values;
  },
  _isArray: function(values) {
    if (Array.isArray(values)) {
      return true;
    }
    return values && isType(values.length, Number);
  }
});

isDev && define(Arguments.prototype, {
  validate: function(values, partial) {
    var error;
    if (partial == null) {
      partial = false;
    }
    assertType(partial, Boolean, "partial");
    this.partial = partial;
    if (this._isArray(values)) {
      if (!this.isArray) {
        throw TypeError("Cannot validate arrays!");
      }
      error = this._validateArray(values);
    } else {
      if (this.isArray) {
        throw TypeError("Expected an array!");
      }
      if (!isType(values, Object)) {
        throw TypeError("Expected an object!");
      }
      error = this._validateOptions(values);
    }
    this.partial = null;
    if (error) {
      if (isType(error, Object)) {
        return TypeError("Expected '" + error.key + "' to be " + (formatType(error.type, true)) + "!");
      } else {
        return error;
      }
    } else {
      return null;
    }
  },
  _shouldValidate: function(value, key) {
    var required;
    required = this.required;
    if (required === true) {
      return this.shouldValidate(value, key);
    }
    if (required === false) {
      if (value === void 0) {
        return false;
      }
      return this.shouldValidate(value, key);
    }
    if (!(required[key] || isType(value, Object))) {
      return false;
    }
    return this.shouldValidate(value, key);
  },
  _validateArray: function(array) {
    var error, i, index, len, type, types, value;
    types = this.types;
    for (index = i = 0, len = types.length; i < len; index = ++i) {
      type = types[index];
      value = array[index];
      if (!this._shouldValidate(value, index)) {
        continue;
      }
      if (this.partial && (value === void 0)) {
        continue;
      }
      if (error = this._validateType(value, type, "arguments[" + index + "]")) {
        return error;
      }
    }
    return null;
  },
  _validateOptions: function(options) {
    var error, key, type, types, value;
    types = this.types;
    if (this.strict) {
      for (key in options) {
        if (types[key] === void 0) {
          return Error("'options." + key + "' is not supported!");
        }
      }
    }
    for (key in types) {
      type = types[key];
      value = options[key];
      if (!this._shouldValidate(value, key)) {
        continue;
      }
      if (this.partial && (value === void 0)) {
        continue;
      }
      if (error = this._validateType(value, type, "options." + key)) {
        return error;
      }
    }
    return null;
  },
  _validateTypes: function(values, types, keyPath) {
    var error, key, type, value;
    if (this.strict) {
      for (key in values) {
        if (types[key] === void 0) {
          return Error("'" + keyPath + "." + key + "' is not supported!");
        }
      }
    }
    if (keyPath) {
      keyPath += ".";
    }
    for (key in types) {
      type = types[key];
      value = values[key];
      if (this.partial && (value === void 0)) {
        continue;
      }
      if (error = this._validateType(value, type, keyPath + key)) {
        return error;
      }
    }
    return null;
  },
  _validateType: function(value, type, key) {
    if (isType(type, Object)) {
      if (isType(value, Object)) {
        return this._validateTypes(value, type, key);
      }
      return {
        key: key,
        type: Object
      };
    }
    if (type instanceof Validator) {
      return type.assert(value, key);
    }
    if (!isType(value, type)) {
      return {
        key: key,
        type: type
      };
    }
  }
});

isDev || define(Arguments.prototype, {
  validate: emptyFunction
});

Arguments.Builder = (function() {
  var Builder, optionTypes;
  optionTypes = {
    types: ObjectOrArray,
    defaults: ObjectOrArray,
    required: Either(Boolean, ObjectOrArray),
    strict: Boolean,
    create: Function
  };
  Builder = NamedFunction("Arguments_Builder", function() {
    return Object.create(Builder.prototype);
  });
  define(Builder.prototype, {
    set: function(key, value) {
      var optionType;
      if (isDev) {
        if (optionType = optionTypes[key]) {
          assertType(value, optionType, key);
        } else {
          throw Error("Invalid key: '" + key + "'");
        }
      }
      this[key] = value;
    },
    build: function() {
      var args;
      args = Arguments(this.types);
      if (this.defaults) {
        args.defaults = this.defaults;
      }
      if (this.create) {
        args.create = this.create;
      }
      if (isDev) {
        if (this.required != null) {
          args.required = this.required;
        }
        if (this.strict != null) {
          args.strict = this.strict;
        }
      }
      return args;
    }
  });
  return Builder;
})();
